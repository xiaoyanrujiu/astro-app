---
import MobileDrawer from './MobileDrawer';

import Profile from '@/components/Profile';
import TagCloud from '@/components/TagCloud';
import CategoryTree from '@/components/CategoryTree';
import Toc from '@/components/Toc';
import type { SidebarConfig } from '.';
import { twMerge } from 'tailwind-merge';
export interface Props {
  config: SidebarConfig;
  class?: string;
  show?: boolean;
}

const { 
  config, 
  show, 
  class: className,
} = Astro.props;

const { widgets } = config;
---
{show && (
  <aside class="relative hidden md:block" data-sidebar-container>
    <div data-sidebar-space></div>
    <div class={twMerge("flex flex-col gap-3 p-3", className)} data-sidebar-content>
      {widgets?.map(async widget => {
        if (widget.show === false) {
          return null;
        }
        switch (widget.name) {
          case 'component':
            const { name, title, show, ...props} = widget;
            const Component = 'then' in widget.component ? (await widget.component).default : widget.component;
            return (
              <Component {...props} />
            );
          case 'profile': {
            const { name, title, show, ...props} = widget;
            return (
              <Profile {...props} />
            );
          }

          case 'tag-cloud': {
            const { name, title, show, ...props} = widget;
            return (
              <TagCloud {...props} />
            );
          }

          case 'category-tree': {
            const { name, title, show, ...props} = widget;
            return (
              <CategoryTree {...props} client:load />
            );
          }
          case 'toc': {
            const { name, title, show, ...props} = widget;
            return (
              <Toc {...props} client:load />
            );
          }
          default:
            return null;
        }
      })}
    </div>
  </aside>
)}
<MobileDrawer className={className} client:load>
  <div class="flex flex-col gap-3 p-3">
    {widgets?.map(async widget => {
      if (widget.show === false) {
        return null;
      }
      switch (widget.name) {
        case 'component':
          const { name, title, show, ...props} = widget;
          const Component = 'then' in widget.component ? (await widget.component).default : widget.component;
          return (
            <Component {...props} />
          );
        case 'profile': {
          const { name, title, show, ...props} = widget;
          return (
            <Profile {...props} />
          );
        }

        case 'tag-cloud': {
          const { name, title, show, ...props} = widget;
          return (
            <TagCloud {...props} />
          );
        }

        case 'category-tree': {
          const { name, title, show, ...props} = widget;
          return (
            <CategoryTree {...props} client:load />
          );
        }
        case 'toc': {
          const { name, title, show, ...props} = widget;
          return (
            <Toc {...props} client:load />
          );
        }
        default:
          return null;
      }
    })}
  </div>
</MobileDrawer>

<script>
  let prevY = window.scrollY;
  const stickyMarginTop = 64;
  function handler() {
    const { scrollY } = window;
    const containerEl = document?.querySelector<HTMLElement>('[data-sidebar-container]');
    const contentEl = containerEl?.querySelector<HTMLElement>('[data-sidebar-content]');
    const spaceEl = containerEl?.querySelector<HTMLElement>('[data-sidebar-space]');
    if (!containerEl || !contentEl || !spaceEl) {
      return;
    }
    const containerRect = containerEl.getBoundingClientRect();
    const contentRect = contentEl.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    contentEl.style.position = 'sticky';
    if (contentRect.height <= viewportHeight - stickyMarginTop) {
      spaceEl.style.marginTop = '';
      contentEl.style.top = `${stickyMarginTop}px`;
      contentEl.style.bottom = '';
      return;
    }
    if (scrollY > prevY) {
      // scroll down
      contentEl.style.bottom = '';
      contentEl.style.top = `${-(contentRect.height - viewportHeight)}px`;
    } else if (scrollY < prevY) {
      // scroll up
      const contentOffset = Math.max(0, contentRect.top - containerRect.top);
      spaceEl.style.marginTop = `${contentOffset}px`;
      contentEl.style.top = '';
      contentEl.style.bottom = `${-(contentRect.height - viewportHeight + stickyMarginTop)}px`;
    }
    prevY = scrollY;
  };
  window.addEventListener('scroll', handler, {
    capture: false,
    passive: true,
  });
</script>