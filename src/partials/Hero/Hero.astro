---
import { twMerge } from 'tailwind-merge';

import Image from '@/components/Image';
import type { ImageMetadata } from 'astro';

import type { Page, Post } from '@/types';
import type { HTMLAttributes } from 'astro/types';
// import Background from './Background';
import Category from '@/components/Category';
import Tag from '@/components/Tag';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
interface HeroPostInfo {
  type: 'post',
  category: Post['category'],
  tags: Post['tags']
}

interface HeroCategoriesInfo {
  type: 'categories',
  count: number,
}

interface HeroTagsInfo {
  type: 'tags',
  count: number,
}

interface HeroPostsInfo {
  type: 'posts',
  count: number,
}

interface HeroArchiveInfo {
  type: 'archive',
  count: number,
}

type HeroInfo = HeroPostInfo | HeroCategoriesInfo | HeroTagsInfo | HeroPostsInfo | HeroArchiveInfo;


export interface HeroConfig {
  background?: string | ImageMetadata | Promise<{default: ImageMetadata}>;
  description?: string;
  title?: string | AstroComponentFactory | Promise<{ default: AstroComponentFactory }>;
  info?: HeroInfo,
}

export interface HeroProps extends HTMLAttributes<'div'> {
  config: HeroConfig;
}

export type Props = HeroProps;

const {
  config,
  class: className,
  ...rest
} = Astro.props;

const {
  background,
  description,
  title,
  info
} = config;

const Title = (title && typeof title != 'string') ? ('then' in title ? (await title).default : title) : null;
---
<header class={twMerge(
  className
)} {...rest}>
  {background ? (
    <div class='w-full h-full overflow-hidden rounded-xl relative plate-bg plate-shadow border-highlight'>
      <Image src={background} inferSize class='w-full h-full select-none' alt='background' />
      <div class='absolute inset-0 p-4 md:p-8 flex flex-col justify-center items-center text-white'>
        {typeof title === 'string'
          ? <h1 class='text-2xl md:text-4xl mb-2 font-bold text-center break-words drop-shadow-[0px_2px_3px_rgb(31,41,55,.5)]'>{title}</h1> 
          : Title && <Title />
        }
        {!info && description && <div class='mt-4 bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] px-2 py-1 rounded-md text-primary leading-4'>{description}</div>}
        {info?.type === 'post' && <div class='flex flex-wrap items-center justify-center mt-2 md:mt-4 gap-2'>
          <Category className='bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] pl-1.5 pr-2 py-1 rounded-md text-primary leading-4 duration-75 hover:bg-primary-500 hover:text-white dark:hover:bg-primary-500' onlyText category={info.category} />
          {info.tags.map(tag => <Tag className='bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] pl-1.5 pr-2 py-1 rounded-md text-primary leading-4 duration-75 hover:bg-primary-500 hover:text-white dark:hover:bg-primary-500' onlyText tag={tag} />)}
        </div>}
        {info?.type === 'categories' && (
          <div class='flex flex-wrap justify-center mt-4 bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] px-2 py-1 rounded-md text-primary leading-4'>
            <div>共{info.count}个分类</div>
          </div>
        )}
        {info?.type === 'tags' && (
          <div class='flex flex-wrap justify-center mt-4 bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] px-2 py-1 rounded-md text-primary leading-4'>
            <div>共{info.count}个标签</div>
          </div>
        )}
        {info?.type === 'posts' && (
          <div class='flex flex-wrap justify-center mt-4 bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] px-2 py-1 rounded-md text-primary leading-4'>
            <div>共{info.count}篇文章</div>
          </div>
        )}
        {info?.type === 'archive' && (
          <div class='flex flex-wrap justify-center mt-4 bg-white/65 backdrop-blur dark:bg-black/65 shadow-md text-[0.8125rem] px-2 py-1 rounded-md text-primary leading-4'>
            <div>共{info.count}篇文章</div>
          </div>
        )}
      </div>
    </div>
  ) : (
    <div class='w-full h-full text-primary'>
      <div class='py-4 md:py-6 md:pt-8 flex flex-col justify-center items-center'>
        {typeof title === 'string'
          ? <h1 class='text-2xl md:text-4xl mb-2 font-bold text-center break-words'>{title}</h1>
          : Title && <Title />
        }
        {!info && description && <div class='mt-4 text-sm leading-4'>{description}</div>}
        {info?.type === 'post' && <div class='flex flex-wrap items-center justify-center mt-2 md:mt-4 gap-2'>
          <Category className='text-[0.8125rem] pl-1.5 pr-2 py-[0.1875rem] plate-bg plate-shadow border-highlight rounded-md duration-75 leading-4 hover:bg-primary-500 hover:text-white' onlyText category={info.category} />
          {info.tags.map(tag => <Tag className='text-[0.8125rem] pl-1.5 pr-2 py-[0.1875rem] plate-bg plate-shadow border-highlight rounded-md duration-75 leading-4 hover:bg-primary-500 hover:text-white' onlyText tag={tag} />)}
        </div>}
        {info?.type === 'categories' && (
          <div class='flex flex-wrap justify-center mt-4 text-sm'>
            <div>共{info.count}个分类</div>
          </div>
        )}
        {info?.type === 'tags' && (
          <div class='flex flex-wrap justify-center mt-4 text-sm'>
            <div>共{info.count}个标签</div>
          </div>
        )}
        {info?.type === 'posts' && (
          <div class='flex flex-wrap justify-center mt-4 text-sm'>
            <div>共{info.count}篇文章</div>
          </div>
        )}
        {info?.type === 'archive' && (
          <div class='flex flex-wrap justify-center mt-4 text-sm'>
            <div>共{info.count}篇文章</div>
          </div>
        )}
      </div>
    </div>
  )}

</header>