---
import type { GetStaticPaths } from "astro";
import PostLayout from '@/layouts/PostLayout.astro';
import type { Post } from '@/types';
import getPosts from '@/utils/getPosts';
import MDXComponents from '@/components/MDXComponents';
import ArticleOutdateTip from '@/components/ArticleOutdateTip';
import ArticleLicense from '@/components/ArticleLicense';
import config from '@/config';
import PostMeta from '@/components/PostMeta';
import { compareAsc } from 'date-fns';

export interface Props {
  post: Post;
  prev?: Post;
  next?: Post;
}

export const getStaticPaths = (async () => {
  const allPosts = (await getPosts()).filter(post => !post.draft).sort((a, b) => compareAsc(a.date, b.date));
  const results = [];
  for (let i = 0; i < allPosts.length; i++) {
    const prev = i === 0 ? undefined : allPosts[i - 1];
    const next = i === allPosts.length - 1 ? undefined : allPosts[i + 1];
    const post = allPosts[i];
    results.push({
      params: {
        slug: post.slug,
      },
      props: {
        post,
        prev,
        next,
      },
    });
  }
  return results;
}) satisfies GetStaticPaths;

const { post: postProp, prev: prevProp, next: nextProp } = Astro.props;
const { Content, ...post } = postProp;
const prev = prevProp ? Object.fromEntries(
  Object.entries(prevProp).filter(([key]) => key !== 'Content')
) as Omit<Post, 'Content'> : undefined;
const next = nextProp ? Object.fromEntries(
  Object.entries(nextProp).filter(([key]) => key !== 'Content')
) as Omit<Post, 'Content'> : undefined;

const outdateTipConfig = config.article?.outdateTip;
const licenseConfig = config.article?.license;
---

<PostLayout post={post} prev={prev} next={next}>
  <div class="not-prose -mx-4 -mt-4 md:-mx-8 md:-mt-8 mb-3 md:mb-6" slot="header">
    <PostMeta 
      date={post.date}
      updateDate={post.updateDate}
      draft={post.draft}
      author={post.author}
      readingTime={post.readingTime}
      wordCount={post.wordCount}
      class="px-4 md:px-8 pt-4 md:pt-5 pb-3"
    />
    {
      outdateTipConfig && <ArticleOutdateTip
        updateDate={post.updateDate}
        outdateLimit={outdateTipConfig.outdateLimit}
        className="px-4 md:px-8"
        client:load
      />
    }
  </div>
  <Content components={MDXComponents} />
  <div class="not-prose -mx-4 md:-mx-8 mt-4 md:mt-8" slot="footer">
    {
      licenseConfig && <ArticleLicense
        url={decodeURI(Astro.url.href)}
        title={post.title}
        author={post.author.name}
        date={post.date}
        updateDate={post.updateDate}
        licenseName={licenseConfig.licenseName}
        licenseUrl={licenseConfig.licenseUrl}
        infoText={licenseConfig.infoText}
        class="px-4 md:px-8"
      />
    }
  </div>
</PostLayout>
